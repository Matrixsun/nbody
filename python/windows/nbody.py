# This file was automatically generated by SWIG (http://www.swig.org).
# Version 2.0.9
#
# Do not make changes to this file unless you know what you are doing--modify
# the SWIG interface file instead.



from sys import version_info
if version_info >= (2,6,0):
    def swig_import_helper():
        from os.path import dirname
        import imp
        fp = None
        try:
            fp, pathname, description = imp.find_module('_nbody', [dirname(__file__)])
        except ImportError:
            import _nbody
            return _nbody
        if fp is not None:
            try:
                _mod = imp.load_module('_nbody', fp, pathname, description)
            finally:
                fp.close()
            return _mod
    _nbody = swig_import_helper()
    del swig_import_helper
else:
    import _nbody
del version_info
try:
    _swig_property = property
except NameError:
    pass # Python < 2.2 doesn't have 'property'.
def _swig_setattr_nondynamic(self,class_type,name,value,static=1):
    if (name == "thisown"): return self.this.own(value)
    if (name == "this"):
        if type(value).__name__ == 'SwigPyObject':
            self.__dict__[name] = value
            return
    method = class_type.__swig_setmethods__.get(name,None)
    if method: return method(self,value)
    if (not static):
        self.__dict__[name] = value
    else:
        raise AttributeError("You cannot add attributes to %s" % self)

def _swig_setattr(self,class_type,name,value):
    return _swig_setattr_nondynamic(self,class_type,name,value,0)

def _swig_getattr(self,class_type,name):
    if (name == "thisown"): return self.this.own()
    method = class_type.__swig_getmethods__.get(name,None)
    if method: return method(self)
    raise AttributeError(name)

def _swig_repr(self):
    try: strthis = "proxy of " + self.this.__repr__()
    except: strthis = ""
    return "<%s.%s; %s >" % (self.__class__.__module__, self.__class__.__name__, strthis,)

try:
    _object = object
    _newclass = 1
except AttributeError:
    class _object : pass
    _newclass = 0


class System(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, System, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, System, name)
    __repr__ = _swig_repr
    def addobject(self, *args): return _nbody.System_addobject(self, *args)
    def getobject(self, *args): return _nbody.System_getobject(self, *args)
    def runtotime(self, *args): return _nbody.System_runtotime(self, *args)
    def settime(self, *args): return _nbody.System_settime(self, *args)
    def gettime(self): return _nbody.System_gettime(self)
    def setdt(self, *args): return _nbody.System_setdt(self, *args)
    def calculate_a(self): return _nbody.System_calculate_a(self)
    def __init__(self, *args): 
        this = _nbody.new_System(*args)
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nbody.delete_System
    __del__ = lambda self : None;
System_swigregister = _nbody.System_swigregister
System_swigregister(System)

class vect(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, vect, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, vect, name)
    __repr__ = _swig_repr
    __swig_setmethods__["x"] = _nbody.vect_x_set
    __swig_getmethods__["x"] = _nbody.vect_x_get
    if _newclass:x = _swig_property(_nbody.vect_x_get, _nbody.vect_x_set)
    __swig_setmethods__["y"] = _nbody.vect_y_set
    __swig_getmethods__["y"] = _nbody.vect_y_get
    if _newclass:y = _swig_property(_nbody.vect_y_get, _nbody.vect_y_set)
    __swig_setmethods__["z"] = _nbody.vect_z_set
    __swig_getmethods__["z"] = _nbody.vect_z_get
    if _newclass:z = _swig_property(_nbody.vect_z_get, _nbody.vect_z_set)
    def __init__(self, *args): 
        this = _nbody.new_vect(*args)
        try: self.this.append(this)
        except: self.this = this
    def __eq__(self, *args): return _nbody.vect___eq__(self, *args)
    def __iadd__(self, *args): return _nbody.vect___iadd__(self, *args)
    def __isub__(self, *args): return _nbody.vect___isub__(self, *args)
    def __imul__(self, *args): return _nbody.vect___imul__(self, *args)
    def __add__(self, *args): return _nbody.vect___add__(self, *args)
    def __sub__(self, *args): return _nbody.vect___sub__(self, *args)
    def __mul__(self, *args): return _nbody.vect___mul__(self, *args)
    def __ne__(self, *args): return _nbody.vect___ne__(self, *args)
    def mag(self): return _nbody.vect_mag(self)
    __swig_destroy__ = _nbody.delete_vect
    __del__ = lambda self : None;
vect_swigregister = _nbody.vect_swigregister
vect_swigregister(vect)

class cobject(_object):
    __swig_setmethods__ = {}
    __setattr__ = lambda self, name, value: _swig_setattr(self, cobject, name, value)
    __swig_getmethods__ = {}
    __getattr__ = lambda self, name: _swig_getattr(self, cobject, name)
    __repr__ = _swig_repr
    def getpos(self): return _nbody.cobject_getpos(self)
    __swig_setmethods__["pos"] = _nbody.cobject_pos_set
    __swig_getmethods__["pos"] = _nbody.cobject_pos_get
    if _newclass:pos = _swig_property(_nbody.cobject_pos_get, _nbody.cobject_pos_set)
    __swig_setmethods__["pos1"] = _nbody.cobject_pos1_set
    __swig_getmethods__["pos1"] = _nbody.cobject_pos1_get
    if _newclass:pos1 = _swig_property(_nbody.cobject_pos1_get, _nbody.cobject_pos1_set)
    __swig_setmethods__["v"] = _nbody.cobject_v_set
    __swig_getmethods__["v"] = _nbody.cobject_v_get
    if _newclass:v = _swig_property(_nbody.cobject_v_get, _nbody.cobject_v_set)
    __swig_setmethods__["a"] = _nbody.cobject_a_set
    __swig_getmethods__["a"] = _nbody.cobject_a_get
    if _newclass:a = _swig_property(_nbody.cobject_a_get, _nbody.cobject_a_set)
    __swig_setmethods__["fd"] = _nbody.cobject_fd_set
    __swig_getmethods__["fd"] = _nbody.cobject_fd_get
    if _newclass:fd = _swig_property(_nbody.cobject_fd_get, _nbody.cobject_fd_set)
    __swig_setmethods__["a1"] = _nbody.cobject_a1_set
    __swig_getmethods__["a1"] = _nbody.cobject_a1_get
    if _newclass:a1 = _swig_property(_nbody.cobject_a1_get, _nbody.cobject_a1_set)
    __swig_setmethods__["m"] = _nbody.cobject_m_set
    __swig_getmethods__["m"] = _nbody.cobject_m_get
    if _newclass:m = _swig_property(_nbody.cobject_m_get, _nbody.cobject_m_set)
    def __init__(self): 
        this = _nbody.new_cobject()
        try: self.this.append(this)
        except: self.this = this
    __swig_destroy__ = _nbody.delete_cobject
    __del__ = lambda self : None;
cobject_swigregister = _nbody.cobject_swigregister
cobject_swigregister(cobject)


def SolarSystem():
  return _nbody.SolarSystem()
SolarSystem = _nbody.SolarSystem

def dot(*args):
  return _nbody.dot(*args)
dot = _nbody.dot

def cross(*args):
  return _nbody.cross(*args)
cross = _nbody.cross
# This file is compatible with both classic and new-style classes.


